service:
  name: serverless-expense-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  # - serverless-plugin-tracing
  - serverless-dynamodb-local
  - serverless-s3-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    EXPENSES_TABLE: Expense-${self:provider.stage}
    EXPENSES_USER_INDEX: ExpenseUserIndex-${self:provider.stage}
    IMAGES_S3_BUCKET: expense-imgs-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}/index/${self:provider.environment.EXPENSES_USER_INDEX}
    - Effect: Allow
      Action:
        - xray:PutTraceSegments
        - xray:PutTelemetryRecords
      Resource:
        - '*'

custom:
  serverless-offline:
    port: 3003
  # useChildProcesses: true
  dynamodb:
    # noStart: true
    start:
      port: 8000
      inMemory: true
      migrate: true
    seed:
      Todo:
        sources:
          - table: ${self:provider.environment.EXPENSES_TABLE}
            sources: './seeds/seed-expense.json'
    stages:
      - test
      - dev

  s3:
    host: localhost
    directory: /tmp

  documentation:
    api:
      info:
        version: v1.0.0
        title: Expense API
        description: Serverless application for Expense API
    models:
      - name: CreateExpenseReq
        contentType: application/json
        schema: ${file(schemas/create-expense-request.json)}
      - name: UpdateExpenseReq
        contentType: application/json
        schema: ${file(schemas/update-expense-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getExpenses.handler
    events:
      - http:
          method: get
          path: expenses
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}/index/${self:provider.environment.EXPENSES_USER_INDEX}
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource: '*'

  CreateTodo:
    handler: src/lambda/http/createExpense.handler
    events:
      - http:
          method: post
          path: expenses
          cors: true
          authorizer: Auth
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(schemas/create-expense-request.json)}

  UpdateTodo:
    handler: src/lambda/http/updateExpense.handler
    events:
      - http:
          method: patch
          path: expenses/{expenseId}
          cors: true
          authorizer: Auth
          request:
            # Schema that will validate the incoming requests
            schema:
              application/json: ${file(schemas/update-expense-request.json)}
    iamRoleStatementsInherit: true
    iamRoleStatementsName: updateExpenseRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteExpense.handler
    events:
      - http:
          method: delete
          path: expenses/{expenseId}
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: deleteExpenseRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: expenses/{expenseId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsInherit: true
    iamRoleStatementsName: generateUrlExpenseRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.EXPENSES_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expenseId
            AttributeType: S
          - AttributeName: merchantName
            AttributeType: S
          - AttributeName: amount
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.EXPENSES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.EXPENSES_USER_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: s3:GetObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
        Bucket:
          Ref: AttachmentsBucket
